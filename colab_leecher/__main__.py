# copyright 2024 ¬© M01K0 | https://github.com/M01K0/tl_script


import logging, os, json
from pyrogram import filters
from datetime import datetime
from asyncio import sleep, get_event_loop
from colab_leecher import colab_bot, OWNER
from colab_leecher.utility.handler import cancelTask
from .utility.variables import BOT, MSG, BotTimes, Paths
from .utility.task_manager import taskScheduler, task_starter
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from .utility.helper import isLink, setThumbnail, message_deleter, send_settings


src_request_msg = None


@colab_bot.on_message(filters.command("start") & filters.private)
async def start(client, message):
    await message.delete()
    text = "**Hey There, üëãüèº It's Colab Leecher**\n\n‚ó≤ I am a Powerful File Transloading Bot üöÄ\n‚ó≤ I can Transfer Files To Telegram or Your Google Drive From Various Sources ü¶ê"
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "Repository ü¶Ñ",
                    url="https://github.com/M01K0/tl_script",
                ),
                InlineKeyboardButton("Support üíù", url="https://t.me/Colab_Leecher"),
            ],
        ]
    )
    await message.reply_text(text, reply_markup=keyboard)


@colab_bot.on_message(filters.command("tupload") & filters.private)
async def telegram_upload(client, message):
    global BOT, src_request_msg
    BOT.Mode.mode = "leech"
    BOT.Mode.ytdl = False

    text = "<b>‚ö° Send Me DOWNLOAD LINK(s) üîó¬ª</b>\n\nü¶Ä Follow the below pattern\n\n<code>https//linktofile1.mp4\nhttps//linktofile2.mp4\n[Custom name space.mp4]\n{Password for zipping}\n(Password for unzip)</code>"

    src_request_msg = await task_starter(message, text)


@colab_bot.on_message(filters.command("gdupload") & filters.private)
async def drive_upload(client, message):
    global BOT, src_request_msg
    BOT.Mode.mode = "mirror"
    BOT.Mode.ytdl = False

    text = "<b>‚ö° Send Me DOWNLOAD LINK(s) üîó¬ª</b>\n\nü¶Ä Follow the below pattern\n\n<code>https//linktofile1.mp4\nhttps//linktofile2.mp4\n[Custom name space.mp4]\n{Password for zipping}\n(Password for unzip)</code>"

    src_request_msg = await task_starter(message, text)


@colab_bot.on_message(filters.command("drupload") & filters.private)
async def directory_upload(client, message):
    global BOT, src_request_msg
    BOT.Mode.mode = "dir-leech"
    BOT.Mode.ytdl = False

    text = "<b>‚ö° Send Me FOLDER PATH üîó¬ª</b>\n\nü¶Ä Below is an example\n\n<code>/home/user/Downloads/bot</code>"

    src_request_msg = await task_starter(message, text)


@colab_bot.on_message(filters.command("ytupload") & filters.private)
async def yt_upload(client, message):
    global BOT, src_request_msg
    BOT.Mode.mode = "leech"
    BOT.Mode.ytdl = True

    text = "<b>‚ö° Send YTDL DOWNLOAD LINK(s) üîó¬ª</b>\n\nü¶Ä Follow the below pattern\n\n<code>https//linktofile1.mp4\nhttps//linktofile2.mp4\n[Custom name space.mp4]\n{Password for zipping}</code>"

    src_request_msg = await task_starter(message, text)


@colab_bot.on_message(filters.command("settings") & filters.private)
async def settings(client, message):
    if message.chat.id == OWNER:
        await message.delete()
        await send_settings(client, message, message.id, True)


@colab_bot.on_message(filters.reply)
async def setPrefix(client, message):
    global BOT, SETTING
    if BOT.State.prefix:
        BOT.Setting.prefix = message.text
        BOT.State.prefix = False

        await send_settings(client, message, message.reply_to_message_id, False)
        await message.delete()
    elif BOT.State.suffix:
        BOT.Setting.suffix = message.text
        BOT.State.suffix = False

        await send_settings(client, message, message.reply_to_message_id, False)
        await message.delete()


@colab_bot.on_message(filters.create(isLink) & ~filters.photo)
async def handle_url(client, message):
    global BOT

    # Reset
    BOT.Options.custom_name = ""
    BOT.Options.zip_pswd = ""
    BOT.Options.unzip_pswd = ""

    if src_request_msg:
        await src_request_msg.delete()
    if BOT.State.task_going == False and BOT.State.started:
        temp_source = message.text.splitlines()

        # Check for arguments in message
        for _ in range(3):
            if temp_source[-1][0] == "[":
                BOT.Options.custom_name = temp_source[-1][1:-1]
                temp_source.pop()
            elif temp_source[-1][0] == "{":
                BOT.Options.zip_pswd = temp_source[-1][1:-1]
                temp_source.pop()
            elif temp_source[-1][0] == "(":
                BOT.Options.unzip_pswd = temp_source[-1][1:-1]
                temp_source.pop()
            else:
                break

        BOT.SOURCE = temp_source
        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("Regular", callback_data="normal")],
                [
                    InlineKeyboardButton("Compress", callback_data="zip"),
                    InlineKeyboardButton("Extract", callback_data="unzip"),
                ],
                [InlineKeyboardButton("UnDoubleZip", callback_data="undzip")],
            ]
        )
        await message.reply_text(
            text=f"<b>üêπ Select Type of {BOT.Mode.mode.capitalize()} You Want ¬ª </b>\n\nRegular:<i> Normal file upload</i>\nCompress:<i> Zip file upload</i>\nExtract:<i> extract before upload</i>\nUnDoubleZip:<i> Unzip then compress</i>",
            reply_markup=keyboard,
            quote=True,
        )
    elif BOT.State.started:
        await message.delete()
        await message.reply_text(
            "<i>I am Already Working ! Please Wait Until I finish üò£!!</i>"
        )


@colab_bot.on_callback_query()
async def handle_options(client, callback_query):
    global BOT, MSG

    if callback_query.data in ["normal", "zip", "unzip", "undzip"]:
        BOT.Mode.type = callback_query.data
        await callback_query.message.delete()
        await colab_bot.delete_messages(
            chat_id=callback_query.message.chat.id,
            message_ids=callback_query.message.reply_to_message_id,
        )
        MSG.status_msg = await colab_bot.send_message(
            chat_id=OWNER,
            text="#STARTING_TASK\n\n**Starting your task in a few Seconds...ü¶ê**",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("Cancel ‚ùå", callback_data="cancel")],
                ]
            ),
        )
        BOT.State.task_going = True
        BOT.State.started = False
        BotTimes.start_time = datetime.now()
        event_loop = get_event_loop()
        BOT.TASK = event_loop.create_task(taskScheduler())  # type: ignore
        await BOT.TASK
        BOT.State.task_going = False

    elif callback_query.data == "video":
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("Split Videos", callback_data="split-true"),
                    InlineKeyboardButton("Zip Videos", callback_data="split-false"),
                ],
                [
                    InlineKeyboardButton("Convert", callback_data="convert-true"),
                    InlineKeyboardButton(
                        "Don't Convert", callback_data="convert-false"
                    ),
                ],
                [
                    InlineKeyboardButton("To ¬ª Mp4", callback_data="mp4"),
                    InlineKeyboardButton("To ¬ª Mkv", callback_data="mkv"),
                ],
                [
                    InlineKeyboardButton("High Quality", callback_data="q-High"),
                    InlineKeyboardButton("Low Quality", callback_data="q-Low"),
                ],
                [InlineKeyboardButton("Back ‚èé", callback_data="back")],
            ]
        )
        await callback_query.message.edit_text(
            f"CHOOSE YOUR DESIRED OPTION ‚öôÔ∏è ¬ª\n\n‚ï≠‚å¨ CONVERT ¬ª <code>{BOT.Setting.convert_video}</code>\n‚îú‚å¨ SPLIT ¬ª <code>{BOT.Setting.split_video}</code>\n‚îú‚å¨ OUTPUT FORMAT ¬ª <code>{BOT.Options.video_out}</code>\n‚ï∞‚å¨ OUTPUT QUALITY ¬ª <code>{BOT.Setting.convert_quality}</code>",
            reply_markup=keyboard,
        )
    elif callback_query.data == "caption":
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("Monospace", callback_data="code-Monospace"),
                    InlineKeyboardButton("Bold", callback_data="b-Bold"),
                ],
                [
                    InlineKeyboardButton("Italic", callback_data="i-Italic"),
                    InlineKeyboardButton("Underlined", callback_data="u-Underlined"),
                ],
                [InlineKeyboardButton("Regular", callback_data="p-Regular")],
            ]
        )
        await callback_query.message.edit_text(
            "CHOOSE YOUR CAPTION FONT STYLE ¬ª\n\n‚å¨ <code>Monospace</code>\n‚å¨ Regular\n‚å¨ <b>Bold</b>\n‚å¨ <i>Italic</i>\n‚å¨ <u>Underlined</u>",
            reply_markup=keyboard,
        )
    elif callback_query.data == "thumb":
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("Delete Thumbnail", callback_data="del-thumb"),
                ],
                [
                    InlineKeyboardButton("Go Back ‚èé", callback_data="back"),
                ],
            ]
        )
        thmb_ = "None" if not BOT.Setting.thumbnail else "Exists"
        await callback_query.message.edit_text(
            f"CHOOSE YOUR THUMBNAIL SETTINGS ¬ª\n\n‚å¨ Thumbnail ¬ª {thmb_}\n‚å¨ Send an Image to set as Your Thumbnail",
            reply_markup=keyboard,
        )
    elif callback_query.data == "del-thumb":
        if BOT.Setting.thumbnail:
            os.remove(Paths.THMB_PATH)
        BOT.Setting.thumbnail = False
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )
    elif callback_query.data == "set-prefix":
        await callback_query.message.edit_text(
            "Send a Text to Set as PREFIX by REPLYING THIS MESSAGE ¬ª"
        )
        BOT.State.prefix = True
    elif callback_query.data == "set-suffix":
        await callback_query.message.edit_text(
            "Send a Text to Set as SUFFIX by REPLYING THIS MESSAGE ¬ª"
        )
        BOT.State.suffix = True
    elif callback_query.data in [
        "code-Monospace",
        "p-Regular",
        "b-Bold",
        "i-Italic",
        "u-Underlined",
    ]:
        res = callback_query.data.split("-")
        BOT.Options.caption = res[0]
        BOT.Setting.caption = res[1]
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )
    elif callback_query.data in ["split-true", "split-false"]:
        BOT.Options.is_split = True if callback_query.data == "split-true" else False
        BOT.Setting.split_video = (
            "Split Videos" if callback_query.data == "split-true" else "Zip Videos"
        )
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )
    elif callback_query.data in [
        "convert-true",
        "convert-false",
        "mp4",
        "mkv",
        "q-High",
        "q-Low",
    ]:
        if callback_query.data in ["convert-true", "convert-false"]:
            BOT.Options.convert_video = (
                True if callback_query.data == "convert-true" else False
            )
            BOT.Setting.convert_video = (
                "Yes" if callback_query.data == "convert-true" else "No"
            )
        elif callback_query.data in ["q-High", "q-Low"]:
            BOT.Setting.convert_quality = callback_query.data.split("-")[-1]
            BOT.Options.convert_quality = (
                True if BOT.Setting.convert_quality == "High" else False
            )
            await send_settings(
                client, callback_query.message, callback_query.message.id, False
            )
        else:
            BOT.Options.video_out = callback_query.data
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )
    elif callback_query.data in ["media", "document"]:
        BOT.Options.stream_upload = True if callback_query.data == "media" else False
        BOT.Setting.stream_upload = (
            "Media" if callback_query.data == "media" else "Document"
        )
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )

    elif callback_query.data == "close":
        await callback_query.message.delete()
    elif callback_query.data == "back":
        await send_settings(
            client, callback_query.message, callback_query.message.id, False
        )

    # @main Triggering Actual Leech Functions
    elif callback_query.data in ["ytdl-true", "ytdl-false"]:
        BOT.Mode.ytdl = True if callback_query.data == "ytdl-true" else False
        await callback_query.message.delete()
        await colab_bot.delete_messages(
            chat_id=callback_query.message.chat.id,
            message_ids=callback_query.message.reply_to_message_id,
        )
        MSG.status_msg = await colab_bot.send_message(
            chat_id=OWNER,
            text="#STARTING_TASK\n\n**Starting your task in a few Seconds...ü¶ê**",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("Cancel ‚ùå", callback_data="cancel")],
                ]
            ),
        )
        BOT.State.task_going = True
        BOT.State.started = False
        BotTimes.start_time = datetime.now()
        event_loop = get_event_loop()
        BOT.TASK = event_loop.create_task(taskScheduler())  # type: ignore
        await BOT.TASK
        BOT.State.task_going = False

    # If user Wants to Stop The Task
    elif callback_query.data == "cancel":
        await cancelTask("User Cancelled !")


@colab_bot.on_message(filters.photo & filters.private)
async def handle_image(client, message):
    msg = await message.reply_text("<i>Trying To Save Thumbnail...</i>")
    success = await setThumbnail(message)
    if success:
        await msg.edit_text("**Thumbnail Successfully Changed ‚úÖ**")
        await message.delete()
    else:
        await msg.edit_text(
            "ü•≤ **Couldn't Set Thumbnail, Please Try Again !**", quote=True
        )
    await sleep(15)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("setname") & filters.private)
async def custom_name(client, message):
    global BOT
    if len(message.command) != 2:
        msg = await message.reply_text(
            "Send\n/setname <code>custom_fileame.extension</code>\nTo Set Custom File Name üìõ",
            quote=True,
        )
    else:
        BOT.Options.custom_name = message.command[1]
        msg = await message.reply_text(
            "Custom Name Has Been Successfully Set !", quote=True
        )

    await sleep(15)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("zipaswd") & filters.private)
async def zip_pswd(client, message):
    global BOT
    if len(message.command) != 2:
        msg = await message.reply_text(
            "Send\n/zipaswd <code>password</code>\nTo Set Password for Output Zip File. üîê",
            quote=True,
        )
    else:
        BOT.Options.zip_pswd = message.command[1]
        msg = await message.reply_text(
            "Zip Password Has Been Successfully Set !", quote=True
        )

    await sleep(15)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("unzipaswd") & filters.private)
async def unzip_pswd(client, message):
    global BOT
    if len(message.command) != 2:
        msg = await message.reply_text(
            "Send\n/unzipaswd <code>password</code>\nTo Set Password for Extracting Archives. üîì",
            quote=True,
        )
    else:
        BOT.Options.unzip_pswd = message.command[1]
        msg = await message.reply_text(
            "Unzip Password Has Been Successfully Set !", quote=True
        )

    await sleep(15)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("help") & filters.private)
async def help_command(client, message):
    msg = await message.reply_text(
        "**ü§ñ COLAB LEECHER - GU√çA DE COMANDOS**\n\n"
        
        "**üìÅ COMANDOS B√ÅSICOS:**\n"
        "‚ñ∏ `/start` - Verificar si el bot est√° activo üîç\n"
        "‚ñ∏ `/help` - Mostrar esta ayuda üìñ\n"
        "‚ñ∏ `/settings` - Configurar ajustes del bot ‚öôÔ∏è\n\n"
        
        "**üöÄ COMANDOS DE SUBIDA:**\n"
        "‚ñ∏ `/tupload` - Subir a Telegram üì§\n"
        "‚ñ∏ `/gdupload` - Subir a Google Drive ‚òÅÔ∏è\n"
        "‚ñ∏ `/ytupload` - Descargar de YouTube/YTDL üé•\n"
        "‚ñ∏ `/drupload` - Subir carpeta local üìÅ\n\n"
        
        "**üåü MODO PREMIUM (4GB):**\n"
        "‚ñ∏ `/premium` - Activar/desactivar modo 4GB üåü\n"
        "‚ñ∏ `/status` - Ver estado completo del bot üìä\n"
        "‚ñ∏ `/diagnose` - Diagn√≥stico del sistema üîç\n\n"
        
        "**üõ†Ô∏è CONFIGURACI√ìN:**\n"
        "‚ñ∏ `/setname` - Nombre personalizado üìõ\n"
        "‚ñ∏ `/zipaswd` - Contrase√±a para ZIP üîê\n"
        "‚ñ∏ `/unzipaswd` - Contrase√±a para extraer üîì\n\n"
        
        "**üåÑ MINIATURA:**\n"
        "‚ñ∏ **Env√≠a una imagen** para usarla como thumbnail\n\n"
        
        "**üéØ PASOS PARA 4GB:**\n"
        "1. üí≥ **Suscr√≠bete a Telegram Premium**\n"
        "2. üîë **Genera session string:**\n"
        "   ```!cd /content/tl_script && python3 generate_user_session.py```\n"
        "3. üåü **Activa Premium:** `/premium`\n"
        "4. üìä **Verifica estado:** `/status`\n"
        "5. üß™ **Prueba con archivos >2GB**\n\n"
        
        "**üö® SOLUCI√ìN DE PROBLEMAS:**\n"
        "‚ñ∏ Si no detecta Pyrofork: `/diagnose`\n"
        "‚ñ∏ Si falla Premium: regenera session string\n"
        "‚ñ∏ Para debug completo: `/status`",
        quote=True,
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìñ Instrucciones",
                        url="https://github.com/M01K0/tl_script/wiki/INSTRUCTIONS",
                    ),
                    InlineKeyboardButton(
                        "üîç Session Generator",
                        url="https://github.com/M01K0/tl_script/blob/main/generate_user_session.py",
                    ),
                ],
                [
                    InlineKeyboardButton(
                        "üì£ Canal",
                        url="https://t.me/Colab_Leecher",
                    ),
                    InlineKeyboardButton(
                        "üí¨ Grupo",
                        url="https://t.me/Colab_Leecher_Discuss",
                    ),
                ],
            ]
        ),
    )
    await sleep(20)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("premium") & filters.private)
async def toggle_premium(client, message):
    """üåü Comando mejorado para activar/desactivar modo Premium 4GB - Similar a generate_user_session.py"""
    global BOT
    
    # Verificar si pyrofork est√° disponible (motor principal)
    if not BOT.Options.pyrofork_available:
        msg = await message.reply_text(
            "‚ö†Ô∏è **PYROFORK NO DISPONIBLE**\n\n"
            f"üîß **Motor actual:** Pyrogram {BOT.Options.pyrogram_version}\n"
            f"üìä **L√≠mite m√°ximo:** 2GB\n\n"
            "üöÄ **Para habilitar 4GB necesitas:**\n"
            "```\n"
            "pip install --force-reinstall pyrofork==2.2.11\n"
            "```\n\n"
            "üîÑ **Despu√©s reinicia el bot** ejecutando main.py",
            quote=True
        )
        await sleep(20)
        await message_deleter(message, msg)
        return
    
    # Verificar si existe session string
    session_file = "/content/tl_script/user_session.txt"
    
    try:
        if not os.path.exists(session_file):
            msg = await message.reply_text(
                "‚ö†Ô∏è **SESSION STRING NO DISPONIBLE**\n\n"
                f"‚úÖ **Pyrofork {BOT.Options.pyrogram_version} detectado correctamente**\n\n"
                "üìã **Para habilitar archivos de 4GB necesitas:**\n"
                "1. üì± Generar tu session string de usuario\n"
                "2. üí≥ Tener Telegram Premium activo\n\n"
                "üöÄ **Ejecuta este comando:**\n"
                "```\n"
                "!cd /content/tl_script && python3 generate_user_session.py\n"
                "```\n\n"
                "üí° **Despu√©s ejecuta** `/premium` **para activar**",
                quote=True
            )
            await sleep(20)
            await message_deleter(message, msg)
            return
        
        # Leer session string
        with open(session_file, 'r') as f:
            session_string = f.read().strip()
        
        if not session_string:
            msg = await message.reply_text(
                "‚ùå **Session string vac√≠o o inv√°lido**\n\n"
                "üîÑ **Regenera tu session string:**\n"
                "```\n"
                "!cd /content/tl_script && python3 generate_user_session.py\n"
                "```",
                quote=True
            )
            await sleep(15)
            await message_deleter(message, msg)
            return
        
        # Alternar modo premium
        BOT.Options.premium_mode = not BOT.Options.premium_mode
        BOT.Options.user_session_string = session_string
        
        if BOT.Options.premium_mode:
            # üîç VERIFICACI√ìN DE PREMIUM - Misma l√≥gica que generate_user_session.py
            try:
                # Usar pyrofork directamente (disponible seg√∫n detecci√≥n mejorada)
                from pyrofork import Client
                
                temp_client = Client(
                    "temp_premium_check",
                    api_id=colab_bot.api_id,
                    api_hash=colab_bot.api_hash,
                    session_string=session_string
                )
                
                await temp_client.start()
                
                # Obtener informaci√≥n del usuario - misma detecci√≥n que en tu script
                me = await temp_client.get_me()
                is_premium = hasattr(me, 'is_premium') and me.is_premium
                
                await temp_client.stop()
                
                # Configurar variables seg√∫n detecci√≥n
                BOT.Options.is_premium_user = is_premium
                BOT.Options.max_file_size = 4194304000 if is_premium else 2097152000  # 4GB o 2GB
                
                if is_premium:
                    status = "**üéâ MODO PREMIUM ACTIVADO EXITOSAMENTE**\n\n"
                    status += f"‚úÖ **Usuario:** {me.first_name}\n"
                    if me.username:
                        status += f"‚úÖ **Username:** @{me.username}\n"
                    status += f"‚úÖ **Telegram Premium:** Detectado\n"
                    status += f"‚úÖ **L√≠mite de archivos:** 4GB\n"
                    status += f"‚úÖ **Motor:** Pyrofork {BOT.Options.pyrogram_version}\n"
                    status += f"‚úÖ **Cliente de usuario:** Habilitado\n\n"
                    status += "üöÄ **Capacidades habilitadas:**\n"
                    status += "   ‚ñ∏ Archivos de hasta 4GB\n"
                    status += "   ‚ñ∏ Subida con cliente de usuario\n"
                    status += "   ‚ñ∏ Soporte completo para Premium"
                else:
                    status = "**‚ö†Ô∏è MODO ACTIVADO - SIN TELEGRAM PREMIUM**\n\n"
                    status += f"üë§ **Usuario:** {me.first_name}\n"
                    if me.username:
                        status += f"üîó **Username:** @{me.username}\n"
                    status += f"‚ùå **Telegram Premium:** No detectado\n"
                    status += f"üìã **L√≠mite de archivos:** 2GB (divisi√≥n autom√°tica)\n"
                    status += f"‚úÖ **Motor:** Pyrofork {BOT.Options.pyrogram_version}\n\n"
                    status += "üí° **Para aprovechar 4GB:**\n"
                    status += "   1. üí≥ Suscr√≠bete a Telegram Premium\n"
                    status += "   2. üîÑ Ejecuta `/premium` nuevamente\n"
                    status += "   3. üß™ Prueba subiendo archivos >2GB"
                    
            except ImportError:
                # Esto no deber√≠a pasar si la detecci√≥n funciona bien
                BOT.Options.is_premium_user = False
                BOT.Options.max_file_size = 2097152000
                status = "‚ùå **ERROR CR√çTICO:** Pyrofork no disponible en tiempo de ejecuci√≥n\n\nüîÑ **Reinicia el bot**"
            except Exception as e:
                BOT.Options.is_premium_user = False
                BOT.Options.max_file_size = 2097152000
                status = f"**‚ùå ERROR AL VERIFICAR PREMIUM**\n\n"
                status += f"üîÑ Session string v√°lido pero error: {str(e)[:100]}...\n"
                status += f"üìã Usando l√≠mite de 2GB por seguridad\n\n"
                status += f"üí° **Soluciones posibles:**\n"
                status += f"   1. üîÑ Regenera session string\n"
                status += f"   2. ‚úÖ Verifica conexi√≥n a internet\n"
                status += f"   3. üîë Revisa credenciales de API"
        else:
            BOT.Options.max_file_size = 2097152000   # 2GB
            BOT.Options.is_premium_user = False
            BOT.Options.user_session_string = ""
            BOT.Options.user_client_active = False
            status = "**üìã MODO EST√ÅNDAR ACTIVADO**\n\n"
            status += "‚úÖ L√≠mite de archivos: **2GB**\n"
            status += "‚úÖ Divisi√≥n autom√°tica para archivos > 2GB\n"
            status += "‚úÖ Cliente bot est√°ndar\n"
            status += f"‚úÖ Motor: Pyrofork {BOT.Options.pyrogram_version}"
        
        # üìä INFORMACI√ìN T√âCNICA DETALLADA
        status += f"\n\nüìä **INFORMACI√ìN T√âCNICA:**"
        status += f"\n‚ñ∏ **Motor detectado:** Pyrofork {BOT.Options.pyrogram_version} ‚úÖ"
        status += f"\n‚ñ∏ **Soporte 4GB:** ‚úÖ Disponible"
        status += f"\n‚ñ∏ **Modo Premium:** {'‚úÖ Activado' if BOT.Options.premium_mode else '‚ùå Desactivado'}"
        status += f"\n‚ñ∏ **Session String:** {'‚úÖ Cargado' if BOT.Options.user_session_string else '‚ùå No disponible'}"
        status += f"\n‚ñ∏ **L√≠mite configurado:** {BOT.Options.max_file_size // (1024*1024*1024)}GB"
        status += f"\n‚ñ∏ **Archivos grandes:** {'Cliente Usuario' if BOT.Options.is_premium_user else 'Cliente Bot'}"
        
        msg = await message.reply_text(status, quote=True)
        await sleep(30)
        await message_deleter(message, msg)
        
    except Exception as e:
        msg = await message.reply_text(
            f"‚ùå **ERROR EN COMANDO PREMIUM:**\n\n{str(e)}\n\n"
            "üí° **Soluciones:**\n"
            "1. üîÑ Regenera session string:\n"
            "```\n"
            "!cd /content/tl_script && python3 generate_user_session.py\n"
            "```\n"
            "2. ‚úÖ Verifica credenciales en main.py\n"
            "3. üîÑ Reinicia el bot si es necesario",
            quote=True
        )
        await sleep(20)
        await message_deleter(message, msg)


@colab_bot.on_message(filters.command("status") & filters.private)
async def status_command(client, message):
    """üìä Comando mejorado para mostrar el estado completo del bot"""
    global BOT
    
    # Verificar disponibilidad de session string
    session_file = "/content/tl_script/user_session.txt"
    session_available = os.path.exists(session_file)
    
    # üöÄ ENCABEZADO PRINCIPAL
    status_text = "**üìä ESTADO COMPLETO DEL BOT**\n"
    status_text += "=" * 35 + "\n\n"
    
    # üîß INFORMACI√ìN DEL MOTOR
    status_text += "üîß **MOTOR Y CAPACIDADES:**\n"
    if BOT.Options.pyrofork_available:
        status_text += f"‚ñ∏ **Librer√≠a:** Pyrofork {BOT.Options.pyrogram_version} ‚úÖ\n"
        status_text += f"‚ñ∏ **Soporte 4GB:** ‚úÖ Disponible\n"
        status_text += f"‚ñ∏ **Optimizaci√≥n:** ‚úÖ Archivos grandes\n"
    else:
        status_text += f"‚ñ∏ **Librer√≠a:** Pyrogram {BOT.Options.pyrogram_version} ‚ö†Ô∏è\n"
        status_text += f"‚ñ∏ **Soporte 4GB:** ‚ùå No disponible\n"
        status_text += f"‚ñ∏ **L√≠mite m√°ximo:** 2GB est√°ndar\n"
    
    # üåü ESTADO PREMIUM
    status_text += "\nüåü **MODO PREMIUM:**\n"
    status_text += f"‚ñ∏ **Estado:** {'‚úÖ Activado' if BOT.Options.premium_mode else '‚ùå Desactivado'}\n"
    status_text += f"‚ñ∏ **Usuario Premium:** {'‚úÖ Detectado' if BOT.Options.is_premium_user else '‚ùå No detectado'}\n"
    status_text += f"‚ñ∏ **Session String:** {'‚úÖ Disponible' if session_available else '‚ùå No encontrado'}\n"
    status_text += f"‚ñ∏ **Cliente Usuario:** {'‚úÖ Activo' if BOT.Options.user_client_active else '‚ùå Inactivo'}\n"
    
    # üìä L√çMITES DE ARCHIVOS
    current_limit_gb = BOT.Options.max_file_size // (1024*1024*1024)
    status_text += f"\nüìä **L√çMITES DE ARCHIVOS:**\n"
    status_text += f"‚ñ∏ **L√≠mite configurado:** {current_limit_gb}GB ({BOT.Options.max_file_size:,} bytes)\n"
    
    if BOT.Options.premium_mode and BOT.Options.is_premium_user:
        status_text += f"‚ñ∏ **Tipo de subida:** Cliente Usuario (4GB)\n"
        status_text += f"‚ñ∏ **Archivos grandes:** ‚úÖ Soportados\n"
    elif BOT.Options.premium_mode and not BOT.Options.is_premium_user:
        status_text += f"‚ñ∏ **Tipo de subida:** Cliente Bot (2GB + divisi√≥n)\n"
        status_text += f"‚ñ∏ **Divisi√≥n autom√°tica:** ‚úÖ Para archivos >2GB\n"
    else:
        status_text += f"‚ñ∏ **Tipo de subida:** Cliente Bot est√°ndar\n"
        status_text += f"‚ñ∏ **Divisi√≥n autom√°tica:** ‚úÖ Para archivos >2GB\n"
    
    # üìã ESTADO DE TAREAS
    status_text += f"\nüìã **ESTADO DE TAREAS:**\n"
    status_text += f"‚ñ∏ **Bot iniciado:** {'‚úÖ S√≠' if BOT.State.started else '‚ùå No'}\n"
    status_text += f"‚ñ∏ **Tarea activa:** {'üöÄ En progreso' if BOT.State.task_going else '‚úÖ Libre'}\n"
    status_text += f"‚ñ∏ **Modo actual:** {BOT.Mode.mode.capitalize()}\n"
    status_text += f"‚ñ∏ **Tipo de proceso:** {BOT.Mode.type.capitalize()}\n"
    
    # ‚öôÔ∏è CONFIGURACI√ìN AVANZADA
    status_text += f"\n‚öôÔ∏è **CONFIGURACI√ìN:**\n"
    status_text += f"‚ñ∏ **Dividir videos:** {'‚úÖ Activado' if BOT.Options.is_split else '‚ùå Desactivado'}\n"
    status_text += f"‚ñ∏ **Convertir video:** {'‚úÖ Activado' if BOT.Options.convert_video else '‚ùå Desactivado'}\n"
    status_text += f"‚ñ∏ **Formato salida:** {BOT.Options.video_out.upper()}\n"
    status_text += f"‚ñ∏ **Calidad:** {'Baja' if not BOT.Options.convert_quality else 'Alta'}\n"
    
    # üéØ RECOMENDACIONES Y ADVERTENCIAS
    status_text += f"\nüéØ **RECOMENDACIONES:**\n"
    
    if not BOT.Options.pyrofork_available:
        status_text += f"‚ö†Ô∏è **Instala Pyrofork para 4GB:**\n"
        status_text += f"   ```pip install --force-reinstall pyrofork==2.2.11```\n"
    elif BOT.Options.pyrofork_available and not session_available:
        status_text += f"üí° **Genera session string para Premium:**\n"
        status_text += f"   ```!cd /content/tl_script && python3 generate_user_session.py```\n"
    elif BOT.Options.pyrofork_available and session_available and not BOT.Options.premium_mode:
        status_text += f"üåü **Activa modo Premium:**\n"
        status_text += f"   Ejecuta: `/premium`\n"
    elif BOT.Options.premium_mode and BOT.Options.is_premium_user:
        status_text += f"üéâ **¬°Configuraci√≥n perfecta!** Todo listo para 4GB\n"
    else:
        status_text += f"‚úÖ **Sistema funcionando correctamente**\n"
    
    # üîç INFORMACI√ìN T√âCNICA DE DEBUG
    status_text += f"\nüîç **INFORMACI√ìN T√âCNICA:**\n"
    status_text += f"‚ñ∏ **Pyrofork disponible:** {'‚úÖ' if BOT.Options.pyrofork_available else '‚ùå'}\n"
    status_text += f"‚ñ∏ **Versi√≥n librer√≠a:** {BOT.Options.pyrogram_version}\n"
    status_text += f"‚ñ∏ **Umbral archivos grandes:** {BOT.Options.large_file_threshold // (1024*1024)}MB\n"
    status_text += f"‚ñ∏ **Session cargado:** {'‚úÖ' if BOT.Options.user_session_string else '‚ùå'}\n"
    
    msg = await message.reply_text(status_text, quote=True)
    await sleep(35)
    await message_deleter(message, msg)


@colab_bot.on_message(filters.command("diagnose") & filters.private)
async def diagnose_system(client, message):
    """üîç Comando de diagn√≥stico avanzado para detectar problemas de configuraci√≥n"""
    global BOT
    
    # üîç INICIO DEL DIAGN√ìSTICO
    msg_text = "**üîç DIAGN√ìSTICO COMPLETO DEL SISTEMA**\n"
    msg_text += "=" * 40 + "\n\n"
    
    # üì¶ VERIFICAR INSTALACIONES
    msg_text += "üì¶ **VERIFICACI√ìN DE LIBRER√çAS:**\n"
    
    try:
        import pyrofork
        msg_text += f"‚úÖ **Pyrofork:** {pyrofork.__version__} (Instalado)\n"
        pyrofork_installed = True
    except ImportError:
        msg_text += f"‚ùå **Pyrofork:** No instalado\n"
        pyrofork_installed = False
    
    try:
        import pyrogram
        msg_text += f"‚úÖ **Pyrogram:** {pyrogram.__version__} (Disponible)\n"
    except ImportError:
        msg_text += f"‚ùå **Pyrogram:** No disponible\n"
    
    # üîß ESTADO DE LA DETECCI√ìN
    msg_text += f"\nüîß **ESTADO DE DETECCI√ìN:**\n"
    msg_text += f"‚ñ∏ **BOT.Options.pyrofork_available:** {BOT.Options.pyrofork_available}\n"
    msg_text += f"‚ñ∏ **BOT.Options.pyrogram_version:** {BOT.Options.pyrogram_version}\n"
    msg_text += f"‚ñ∏ **Detecci√≥n vs Instalaci√≥n:** {'‚úÖ Coincide' if BOT.Options.pyrofork_available == pyrofork_installed else '‚ùå NO COINCIDE'}\n"
    
    # üìÅ VERIFICAR ARCHIVOS
    msg_text += f"\nüìÅ **VERIFICACI√ìN DE ARCHIVOS:**\n"
    
    # Verificar credentials.json
    credentials_file = "/content/tl_script/credentials.json"
    if os.path.exists(credentials_file):
        msg_text += f"‚úÖ **credentials.json:** Existe\n"
        try:
            with open(credentials_file, 'r') as f:
                creds = json.loads(f.read())
                msg_text += f"   ‚ñ∏ API_ID: {'‚úÖ Configurado' if creds.get('API_ID') else '‚ùå Vac√≠o'}\n"
                msg_text += f"   ‚ñ∏ API_HASH: {'‚úÖ Configurado' if creds.get('API_HASH') else '‚ùå Vac√≠o'}\n"
                msg_text += f"   ‚ñ∏ BOT_TOKEN: {'‚úÖ Configurado' if creds.get('BOT_TOKEN') else '‚ùå Vac√≠o'}\n"
        except Exception as e:
            msg_text += f"   ‚ùå Error leyendo: {str(e)[:50]}...\n"
    else:
        msg_text += f"‚ùå **credentials.json:** No existe\n"
    
    # Verificar user_session.txt
    session_file = "/content/tl_script/user_session.txt"
    if os.path.exists(session_file):
        msg_text += f"‚úÖ **user_session.txt:** Existe\n"
        try:
            with open(session_file, 'r') as f:
                session_content = f.read().strip()
                msg_text += f"   ‚ñ∏ Contenido: {'‚úÖ No vac√≠o' if session_content else '‚ùå Vac√≠o'}\n"
                msg_text += f"   ‚ñ∏ Longitud: {len(session_content)} caracteres\n"
        except Exception as e:
            msg_text += f"   ‚ùå Error leyendo: {str(e)[:50]}...\n"
    else:
        msg_text += f"‚ùå **user_session.txt:** No existe\n"
    
    # üåü VERIFICAR CONFIGURACI√ìN PREMIUM
    msg_text += f"\nüåü **CONFIGURACI√ìN PREMIUM:**\n"
    msg_text += f"‚ñ∏ **premium_mode:** {BOT.Options.premium_mode}\n"
    msg_text += f"‚ñ∏ **is_premium_user:** {BOT.Options.is_premium_user}\n"
    msg_text += f"‚ñ∏ **user_session_string:** {'‚úÖ Cargado' if BOT.Options.user_session_string else '‚ùå Vac√≠o'}\n"
    msg_text += f"‚ñ∏ **user_client_active:** {BOT.Options.user_client_active}\n"
    msg_text += f"‚ñ∏ **max_file_size:** {BOT.Options.max_file_size:,} bytes ({BOT.Options.max_file_size // (1024*1024*1024)}GB)\n"
    
    # üö® PROBLEMAS DETECTADOS
    msg_text += f"\nüö® **PROBLEMAS DETECTADOS:**\n"
    problems = []
    
    if not pyrofork_installed:
        problems.append("Pyrofork no est√° instalado")
    if BOT.Options.pyrofork_available != pyrofork_installed:
        problems.append("Discrepancia en detecci√≥n de Pyrofork")
    if not os.path.exists(credentials_file):
        problems.append("Archivo credentials.json no existe")
    if BOT.Options.premium_mode and not BOT.Options.user_session_string:
        problems.append("Modo Premium activado sin session string")
    
    if problems:
        for i, problem in enumerate(problems, 1):
            msg_text += f"   {i}. ‚ùå {problem}\n"
    else:
        msg_text += f"   üéâ **¬°No se detectaron problemas!**\n"
    
    # üíä SOLUCIONES RECOMENDADAS
    msg_text += f"\nüíä **SOLUCIONES RECOMENDADAS:**\n"
    
    if not pyrofork_installed:
        msg_text += f"1. üì¶ **Instalar Pyrofork:**\n"
        msg_text += f"   ```pip install --force-reinstall pyrofork==2.2.11```\n"
    
    if not os.path.exists(session_file) and pyrofork_installed:
        msg_text += f"2. üîë **Generar Session String:**\n"
        msg_text += f"   ```!cd /content/tl_script && python3 generate_user_session.py```\n"
    
    if pyrofork_installed and os.path.exists(session_file) and not BOT.Options.premium_mode:
        msg_text += f"3. üåü **Activar Modo Premium:**\n"
        msg_text += f"   Ejecuta: `/premium`\n"
    
    msg_text += f"\nüîÑ **Despu√©s de las correcciones:**\n"
    msg_text += f"   1. Reinicia el bot ejecutando main.py\n"
    msg_text += f"   2. Ejecuta `/status` para verificar\n"
    msg_text += f"   3. Prueba `/diagnose` nuevamente\n"
    
    msg = await message.reply_text(msg_text, quote=True)
    await sleep(45)
    await message_deleter(message, msg)


logging.info("Colab Leecher Started !")
colab_bot.run()
